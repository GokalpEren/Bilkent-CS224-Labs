        .data
sizePrompt: .asciiz "Enter matrix dimension N: "
rowMsg:     .asciiz "Row-major sum = "
colMsg:     .asciiz "Col-major sum = "
newline:    .asciiz "\n"

        .text
        .globl main
main:
    li   $v0, 4
    la   $a0, sizePrompt
    syscall

    li   $v0, 5
    syscall
    move $s0, $v0       # s0 = N

    mul  $t0, $s0, $s0  # t0 = N*N
    li   $t1, 4         # word size in bytes
    mul  $t0, $t0, $t1  # t0 = N*N*4
    move $a0, $t0
    li   $v0, 9         # sbrk
    syscall
    move $s1, $v0       # s1 = base address

    li   $s2, 0         # sumRow
    li   $t2, 0         # i = 0
row_i:
    bge  $t2, $s0, row_done
    li   $t3, 0         # j = 0
row_j:
    bge  $t3, $s0, next_row
    mul  $t4, $t2, $s0  # t4 = i*N
    add  $t4, $t4, $t3  # t4 = i*N + j
    li   $t5, 4
    mul  $t4, $t4, $t5  # t4 = (i*N + j)*4
    add  $t4, $s1, $t4  # t4 = address of A[i][j]
    lw   $t6, 0($t4)
    add  $s2, $s2, $t6
    addi $t3, $t3, 1
    j    row_j
next_row:
    addi $t2, $t2, 1
    j    row_i
row_done:
    li   $v0, 4
    la   $a0, rowMsg
    syscall
    li   $v0, 1
    move $a0, $s2
    syscall
    li   $v0, 4
    la   $a0, newline
    syscall

    li   $s3, 0         # sumCol
    li   $t3, 0         # j = 0
col_j:
    bge  $t3, $s0, col_done
    li   $t2, 0         # i = 0
col_i:
    bge  $t2, $s0, next_col
    mul  $t4, $t2, $s0
    add  $t4, $t4, $t3
    li   $t5, 4
    mul  $t4, $t4, $t5
    add  $t4, $s1, $t4
    lw   $t6, 0($t4)
    add  $s3, $s3, $t6
    addi $t2, $t2, 1
    j    col_i
next_col:
    addi $t3, $t3, 1
    j    col_j
col_done:
    li   $v0, 4
    la   $a0, colMsg
    syscall
    li   $v0, 1
    move $a0, $s3
    syscall
    li   $v0, 4
    la   $a0, newline
    syscall

    li   $v0, 10        # exit
    syscall
